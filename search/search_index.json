{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Bash EscapeRoom Labs", "text": ""}, {"location": "#bash-escaperoom-labs", "title": "Bash EscapeRoom Labs", "text": "<p>Decryption Tip</p> <p>If the content doesn\u2019t appear after entering the password in the selected room, please refresh the page (F5 or Ctrl+R).</p> <ul> <li> <p> <pre><code>docker run -it --pull=always ghcr.io/nirgeier/bash-escaperoom:latest\n</code></pre></p> </li> <li> <p> https://killercoda.com/codewizard/scenario/BashEscapeRoom</p> </li> </ul>"}, {"location": "#room-links", "title": "Room Links", "text": "<ul> <li>Rooms  Room 01</li> </ul>"}, {"location": "#intro", "title": "Intro", "text": "<ul> <li>The inspiration comes from github.com/andrey-zap/escapeRoomLinux</li> <li>This tutorial is for teaching bash scripting through puzzles designed as escape rooms.</li> <li>Each room is packaged in its own folder and includes the files, scripts, and assets required to play.</li> <li>Every room folder includes a <code>README</code> that describes the room\u2019s objectives, hints, rules, and how to verify the solution.</li> <li>The Bash Escape Room is a series of bash puzzles (Escape-rooms, rooms similar to the real-life attractions of Escape rooms).</li> <li>The Bash Escape Room puzzles are designed to teach the players Bash and Linux skills &amp; features.</li> <li>The inspiration for this project is the real-life Escape rooms.</li> </ul>"}, {"location": "#pre-requirements", "title": "Pre-Requirements", "text": "<ul> <li>This tutorial will test your <code>Linux</code> and <code>Bash</code> skills.</li> <li>You should be familiar with the following topics:</li> <li>Basic Linux commands</li> <li>Linux File system navigation</li> <li>Linux Text processing tools (like <code>grep</code>, <code>sed</code>, <code>awk</code>)</li> <li>Linux Shell scripting basics</li> <li>Linux Understanding of environment variables</li> <li>Basic knowledge of <code>Docker</code> (if you choose to run it with Docker)</li> <li>Basic knowledge of <code>Vim</code></li> </ul>"}, {"location": "#usage", "title": "Usage", "text": "<p>There are several ways to run the Bash Escape Room. Choose the method that works best for your environment:</p>  Method 1: Killercoda  (Recommended)\ud83d\udc33 Method 2: Docker\ud83d\udcbb Method 3: Local Installation\ud83d\udee0\ufe0f Method 4: Build from Source <p>Play directly in your browser without any local installation:</p> <p>\ud83c\udf10 Launch on Killercoda</p> <p>Benefits:</p> <ul> <li>No installation required</li> <li>Pre-configured environment</li> <li>Works on any device with a web browser</li> <li>All tools pre-installed</li> </ul> <p>The easiest and fastest way to get started:</p> <pre><code>docker run -it --pull=always ghcr.io/nirgeier/bash-escaperoom:latest\n</code></pre> <p>Prerequisites:</p> <ul> <li>Docker installed on your system</li> <li>No additional setup required</li> </ul> <p>For those who prefer to run it directly on their machine:</p> <p><pre><code># Clone the repository\ngit clone https://github.com/nirgeier/Bash-EscapeRoom.git\ncd Bash-EscapeRoom/Labs\n# Start the first room\ncd rooms/room-01\ncat README.md\n</code></pre> Prerequisites:</p> <ul> <li>A Unix-like operating system (Linux, macOS, or Windows with WSL)</li> <li>Bash shell</li> <li>Basic command-line tools (like <code>grep</code>, <code>sed</code>, <code>awk</code>, <code>vim</code></li> <li>Optional: Docker for isolated environments</li> </ul> <p>For developers who want to customize or contribute:</p> <pre><code># Clone the repository\ngit clone https://github.com/nirgeier/Bash-EscapeRoom.git\ncd Bash-EscapeRoom\n\n# Build and run with Docker\ndocker build -t bash-escape-room .\ndocker run -it bash-escape-room\n</code></pre> <p>Prerequisites:</p> <ul> <li>Git</li> <li>Docker</li> <li>Basic knowledge of Docker builds</li> </ul> <p>Good Luck!</p>"}, {"location": "rooms/Room-01/", "title": "Room 01", "text": "<ul> <li>Welcome to the first Room of the Bash Escape Room!</li> </ul> <p>sudo Access</p> <ul> <li>You might need <code>sudo</code> access for some commands.</li> <li>The sudo password is required for elevated privileges.</li> <li>The sudo password is: <code>escape</code>.</li> <li>Write it down, you will need it later.</li> </ul>"}, {"location": "rooms/Room-01/#objective-find-the-hidden-password-by-manipulating-files-in-the-room_files-folder", "title": "Objective: Find the hidden password by manipulating files in the <code>room_files</code> folder.", "text": "<pre><code>This is what you need to do in the First room:\n---------------------------------------------------------\n\n1. Go to `room_files/room_01` folder\n2. delete/move/filter-out all the files with `txt` extension.\n   &gt;&gt; Hint: highly recommended to backup the folder before you make changes\n3. Sort the remaining files by size \n   - Descending Order, including the `hidden files!!` \n4. View the file names on the screen, then take the `first letter` of each filename top-to-bottom.\n5. Once you discover the hidden message, move to the next room.\n6. Open next room README file using the hidden message in `lowercase` without spaces...\n</code></pre> <ol> <li> <p>Go to <code>room_files</code> folder</p> <p>Tip</p> <ul> <li>The folder is in the same directory as this README file.</li> <li>You can navigate to it using the command:  <pre><code>cd room_files\n</code></pre></li> </ul> </li> <li> <p><code>Delete/move/filter-out</code> all the files with <code>.txt</code> extension.</p> <p>Danger</p> <ul> <li>highly recommended to backup the folder before you make changes</li> </ul> <p>Figure out how to use <code>*</code> wildcard to select all <code>.txt</code> files at once.</p> </li> <li> <p>Sort the remaining files by <code>size</code> </p> <ul> <li>Sort in <code>Ascending Order</code>, including the hidden files!!</li> <li>Use <code>ls</code> command with appropriate flags to achieve this.</li> <li>You might want to check <code>man ls</code> for more details.</li> <li>Hint: <code>-a</code> flag shows hidden files, <code>-S</code> sorts by size, and <code>-r</code> reverses the order.</li> </ul> </li> <li> <p>The password for the next room is the <code>first letter</code> of each filename top-to-bottom (Lower Case).</p> </li> <li>Once you discover the password, move to the next room.</li> <li> <p>Move to Room 02 and use the password for decryption.</p> <p>Or: </p> </li> <li> <p>Open the <code>README</code> file using the password in [lowercase] without spaces\u2026</p> <ul> <li>The file is encrypted using <code>vim</code> encryption.</li> <li>The password is the one you found in step 4.</li> <li>Use the command: <code>vim README</code> to open the file.</li> <li>Make sure to open it in <code>vim</code> (not <code>nano</code> or any other editor).</li> <li> <p>If you are not familiar with <code>vim</code>, here is a quick guide:</p> <ul> <li>To open the file: <code>vim README</code></li> <li>To enter the password, just type it when prompted.</li> <li>To exit <code>vim</code>, type <code>:q!</code> to quit without saving or <code>:wq</code> to save and quit.</li> </ul> </li> </ul> <ul> <li>Once you open the encrypted file, use the command: <code>:set key=&lt;password&gt;</code> to set the decryption key.</li> <li>Don\u2019t forget to save <code>:wq</code> in order to keep the file unlocked (also relevant for other rooms).</li> </ul> </li> </ol>"}, {"location": "rooms/Room-01/#useful-commands", "title": "Useful Commands:", "text": "Command Man Page Description <code>rm</code> \ud83d\udd17 <code>rm</code> Remove files or directories <code>mv</code> \ud83d\udd17 <code>mv</code> Move or rename files or directories <code>ls</code> \ud83d\udd17 <code>ls</code> List directory contents <code>cd</code> \ud83d\udd17 <code>cd</code> Change directory <code>vim</code> \ud83d\udd17 <code>vim</code> Text editor <p>GOOD LUCK!</p>"}, {"location": "rooms/Room-12/", "title": "Room 12", "text": "<ul> <li>Welcome to Room 12 of the Bash Escape Room!</li> </ul> <p>sudo Access</p> <ul> <li>You might need <code>sudo</code> access for some commands.</li> <li>The sudo password is required for elevated privileges.</li> <li>The sudo password is: <code>escape</code>.</li> <li>Write it down, you will need it later.</li> </ul>"}, {"location": "rooms/Room-12/#objective-write-a-bash-script-using-loops-and-arrays-to-process-numbers-and-find-the-password", "title": "Objective: Write a bash script using loops and arrays to process numbers and find the password.", "text": "<pre><code>- Congratulations! You have reached room 12!!\n\nTo pass this room:\n---------------------------------------------------------------------\n\n- In this room, we focus on bash loops and arrays.\n- You need to write a bash script that processes a list of numbers using loops and arrays.\n\nTasks:\n------\n\n1. Examine the 'numbers.txt' file in this folder (contains one number per line).\n2. Write a bash script named 'process_numbers.sh' that:\n   - Reads the numbers into an array.\n   - Uses a loop to iterate through the array.\n   - Sums all even numbers.\n   - Counts all odd numbers.\n   - Outputs the password as: sum_of_evens_count_of_odds (e.g., 42_5)\n\n3. Run your script to get the password for the next room.\n\nGood Luck!!!\n</code></pre>"}, {"location": "rooms/Room-12/#steps-to-solve", "title": "Steps to Solve:", "text": "<ol> <li>Examine the data file</li> </ol> <p>!!! tip        - Use <code>cat numbers.txt</code> to view the numbers.</p> <ol> <li>Write the script</li> </ol> <p>!!! info        - Read into array: <code>mapfile -t numbers &lt; numbers.txt</code> or <code>numbers=($(cat numbers.txt))</code>        - Use <code>for</code> loop: <code>for num in \"${numbers[@]}\"; do ... done</code>        - Check even/odd: <code>if [ $((num % 2)) -eq 0 ]; then ... else ... fi</code>        - Sum evens, count odds.</p> <ol> <li>Run and get password</li> </ol> <p>!!! success        - Execute <code>./process_numbers.sh</code>        - Calculate: evens (12,18,24,16,20) sum=90, odds (7,3,9,5,11) count=5, password=90_5</p>"}, {"location": "rooms/Room-12/#useful-commands", "title": "Useful Commands:", "text": "Command Man Page Description <code>for</code> \ud83d\udd17 Bash Loops Loop over items <code>if</code> \ud83d\udd17 Bash Conditionals Conditional execution <code>mapfile</code> \ud83d\udd17 mapfile Read lines into array <code>(( ))</code> \ud83d\udd17 Arithmetic Arithmetic operations <p>GOOD LUCK!</p>"}]}
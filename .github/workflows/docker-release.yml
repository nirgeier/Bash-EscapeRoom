name: Docker Release

on:
  release:
    types: [published]
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nirgeier/bash-escaperoom

jobs:
  build-and-push-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      # Cache for faster builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/docker
            ~/.docker/buildx
          key: ${{ runner.os }}-buildx-release-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-release-
            ${{ runner.os }}-buildx-

      # Add docker multi-platform build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
          else
            VERSION=$GITHUB_SHA
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Set up Docker metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Version tags (v1.2.3)
            type=ref,event=tag
            # Semantic versioning tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for stable releases
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA tag for traceability
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Bash Escape Room
            org.opencontainers.image.description=Interactive bash escape room challenges
            org.opencontainers.image.vendor=nirgeier
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'iso8601'}}
          flavor: |
            latest=auto

      - name: Build and push Docker release image
        uses: docker/build-push-action@v5
        with:
          context: ./content
          file: ./content/Docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            IMAGE_TAG=${{ steps.version.outputs.version }}
            BUILD_TIME=${{ github.run_id }}
            SourceRepository=${{ github.repository }}
            RELEASE_VERSION=${{ steps.version.outputs.version }}

      - name: Generate release summary
        run: |
          echo "## 🐳 Docker Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Images Built:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Create release artifact (optional)
        if: github.event_name == 'release'
        run: |
          # Create a manifest file with build information
          cat > release-manifest.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "git_sha": "${{ github.sha }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "docker_images": [
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}",
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            ],
            "platforms": ["linux/amd64", "linux/arm64"],
            "repository": "${{ github.repository }}"
          }
          EOF

          # Upload to release if this was triggered by a release
          echo "release-manifest.json created"
